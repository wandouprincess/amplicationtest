/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { UserSettingsService } from "../userSettings.service";
import { UserSettingsCreateInput } from "./UserSettingsCreateInput";
import { UserSettings } from "./UserSettings";
import { UserSettingsFindManyArgs } from "./UserSettingsFindManyArgs";
import { UserSettingsWhereUniqueInput } from "./UserSettingsWhereUniqueInput";
import { UserSettingsUpdateInput } from "./UserSettingsUpdateInput";

export class UserSettingsControllerBase {
  constructor(protected readonly service: UserSettingsService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: UserSettings })
  async createUserSettings(
    @common.Body() data: UserSettingsCreateInput
  ): Promise<UserSettings> {
    return await this.service.createUserSettings({
      data: data,
      select: {
        createdAt: true,
        id: true,
        kidsAge: true,
        kidsInterests: true,
        updatedAt: true,
        userId: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [UserSettings] })
  @ApiNestedQuery(UserSettingsFindManyArgs)
  async userSettingsItems(
    @common.Req() request: Request
  ): Promise<UserSettings[]> {
    const args = plainToClass(UserSettingsFindManyArgs, request.query);
    return this.service.userSettingsItems({
      ...args,
      select: {
        createdAt: true,
        id: true,
        kidsAge: true,
        kidsInterests: true,
        updatedAt: true,
        userId: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: UserSettings })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async userSettings(
    @common.Param() params: UserSettingsWhereUniqueInput
  ): Promise<UserSettings | null> {
    const result = await this.service.userSettings({
      where: params,
      select: {
        createdAt: true,
        id: true,
        kidsAge: true,
        kidsInterests: true,
        updatedAt: true,
        userId: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: UserSettings })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateUserSettings(
    @common.Param() params: UserSettingsWhereUniqueInput,
    @common.Body() data: UserSettingsUpdateInput
  ): Promise<UserSettings | null> {
    try {
      return await this.service.updateUserSettings({
        where: params,
        data: data,
        select: {
          createdAt: true,
          id: true,
          kidsAge: true,
          kidsInterests: true,
          updatedAt: true,
          userId: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: UserSettings })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteUserSettings(
    @common.Param() params: UserSettingsWhereUniqueInput
  ): Promise<UserSettings | null> {
    try {
      return await this.service.deleteUserSettings({
        where: params,
        select: {
          createdAt: true,
          id: true,
          kidsAge: true,
          kidsInterests: true,
          updatedAt: true,
          userId: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
