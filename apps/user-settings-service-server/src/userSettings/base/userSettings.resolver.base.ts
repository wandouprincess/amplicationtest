/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { UserSettings } from "./UserSettings";
import { UserSettingsCountArgs } from "./UserSettingsCountArgs";
import { UserSettingsFindManyArgs } from "./UserSettingsFindManyArgs";
import { UserSettingsFindUniqueArgs } from "./UserSettingsFindUniqueArgs";
import { CreateUserSettingsArgs } from "./CreateUserSettingsArgs";
import { UpdateUserSettingsArgs } from "./UpdateUserSettingsArgs";
import { DeleteUserSettingsArgs } from "./DeleteUserSettingsArgs";
import { UserSettingsService } from "../userSettings.service";
@graphql.Resolver(() => UserSettings)
export class UserSettingsResolverBase {
  constructor(protected readonly service: UserSettingsService) {}

  async _userSettingsItemsMeta(
    @graphql.Args() args: UserSettingsCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [UserSettings])
  async userSettingsItems(
    @graphql.Args() args: UserSettingsFindManyArgs
  ): Promise<UserSettings[]> {
    return this.service.userSettingsItems(args);
  }

  @graphql.Query(() => UserSettings, { nullable: true })
  async userSettings(
    @graphql.Args() args: UserSettingsFindUniqueArgs
  ): Promise<UserSettings | null> {
    const result = await this.service.userSettings(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => UserSettings)
  async createUserSettings(
    @graphql.Args() args: CreateUserSettingsArgs
  ): Promise<UserSettings> {
    return await this.service.createUserSettings({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => UserSettings)
  async updateUserSettings(
    @graphql.Args() args: UpdateUserSettingsArgs
  ): Promise<UserSettings | null> {
    try {
      return await this.service.updateUserSettings({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => UserSettings)
  async deleteUserSettings(
    @graphql.Args() args: DeleteUserSettingsArgs
  ): Promise<UserSettings | null> {
    try {
      return await this.service.deleteUserSettings(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
