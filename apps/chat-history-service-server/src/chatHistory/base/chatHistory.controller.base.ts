/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { ChatHistoryService } from "../chatHistory.service";
import { ChatHistoryCreateInput } from "./ChatHistoryCreateInput";
import { ChatHistory } from "./ChatHistory";
import { ChatHistoryFindManyArgs } from "./ChatHistoryFindManyArgs";
import { ChatHistoryWhereUniqueInput } from "./ChatHistoryWhereUniqueInput";
import { ChatHistoryUpdateInput } from "./ChatHistoryUpdateInput";

export class ChatHistoryControllerBase {
  constructor(protected readonly service: ChatHistoryService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: ChatHistory })
  async createChatHistory(
    @common.Body() data: ChatHistoryCreateInput
  ): Promise<ChatHistory> {
    return await this.service.createChatHistory({
      data: data,
      select: {
        createdAt: true,
        id: true,
        message: true,
        timestamp: true,
        updatedAt: true,
        userId: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [ChatHistory] })
  @ApiNestedQuery(ChatHistoryFindManyArgs)
  async chatHistories(@common.Req() request: Request): Promise<ChatHistory[]> {
    const args = plainToClass(ChatHistoryFindManyArgs, request.query);
    return this.service.chatHistories({
      ...args,
      select: {
        createdAt: true,
        id: true,
        message: true,
        timestamp: true,
        updatedAt: true,
        userId: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: ChatHistory })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async chatHistory(
    @common.Param() params: ChatHistoryWhereUniqueInput
  ): Promise<ChatHistory | null> {
    const result = await this.service.chatHistory({
      where: params,
      select: {
        createdAt: true,
        id: true,
        message: true,
        timestamp: true,
        updatedAt: true,
        userId: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: ChatHistory })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateChatHistory(
    @common.Param() params: ChatHistoryWhereUniqueInput,
    @common.Body() data: ChatHistoryUpdateInput
  ): Promise<ChatHistory | null> {
    try {
      return await this.service.updateChatHistory({
        where: params,
        data: data,
        select: {
          createdAt: true,
          id: true,
          message: true,
          timestamp: true,
          updatedAt: true,
          userId: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: ChatHistory })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteChatHistory(
    @common.Param() params: ChatHistoryWhereUniqueInput
  ): Promise<ChatHistory | null> {
    try {
      return await this.service.deleteChatHistory({
        where: params,
        select: {
          createdAt: true,
          id: true,
          message: true,
          timestamp: true,
          updatedAt: true,
          userId: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
