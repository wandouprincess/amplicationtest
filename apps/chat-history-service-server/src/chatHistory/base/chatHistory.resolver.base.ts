/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { ChatHistory } from "./ChatHistory";
import { ChatHistoryCountArgs } from "./ChatHistoryCountArgs";
import { ChatHistoryFindManyArgs } from "./ChatHistoryFindManyArgs";
import { ChatHistoryFindUniqueArgs } from "./ChatHistoryFindUniqueArgs";
import { CreateChatHistoryArgs } from "./CreateChatHistoryArgs";
import { UpdateChatHistoryArgs } from "./UpdateChatHistoryArgs";
import { DeleteChatHistoryArgs } from "./DeleteChatHistoryArgs";
import { ChatHistoryService } from "../chatHistory.service";
@graphql.Resolver(() => ChatHistory)
export class ChatHistoryResolverBase {
  constructor(protected readonly service: ChatHistoryService) {}

  async _chatHistoriesMeta(
    @graphql.Args() args: ChatHistoryCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [ChatHistory])
  async chatHistories(
    @graphql.Args() args: ChatHistoryFindManyArgs
  ): Promise<ChatHistory[]> {
    return this.service.chatHistories(args);
  }

  @graphql.Query(() => ChatHistory, { nullable: true })
  async chatHistory(
    @graphql.Args() args: ChatHistoryFindUniqueArgs
  ): Promise<ChatHistory | null> {
    const result = await this.service.chatHistory(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => ChatHistory)
  async createChatHistory(
    @graphql.Args() args: CreateChatHistoryArgs
  ): Promise<ChatHistory> {
    return await this.service.createChatHistory({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => ChatHistory)
  async updateChatHistory(
    @graphql.Args() args: UpdateChatHistoryArgs
  ): Promise<ChatHistory | null> {
    try {
      return await this.service.updateChatHistory({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => ChatHistory)
  async deleteChatHistory(
    @graphql.Args() args: DeleteChatHistoryArgs
  ): Promise<ChatHistory | null> {
    try {
      return await this.service.deleteChatHistory(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
