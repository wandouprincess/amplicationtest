/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, ChatHistory as PrismaChatHistory } from "@prisma/client";

export class ChatHistoryServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.ChatHistoryCountArgs, "select">
  ): Promise<number> {
    return this.prisma.chatHistory.count(args);
  }

  async chatHistories<T extends Prisma.ChatHistoryFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.ChatHistoryFindManyArgs>
  ): Promise<PrismaChatHistory[]> {
    return this.prisma.chatHistory.findMany<Prisma.ChatHistoryFindManyArgs>(
      args
    );
  }
  async chatHistory<T extends Prisma.ChatHistoryFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.ChatHistoryFindUniqueArgs>
  ): Promise<PrismaChatHistory | null> {
    return this.prisma.chatHistory.findUnique(args);
  }
  async createChatHistory<T extends Prisma.ChatHistoryCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.ChatHistoryCreateArgs>
  ): Promise<PrismaChatHistory> {
    return this.prisma.chatHistory.create<T>(args);
  }
  async updateChatHistory<T extends Prisma.ChatHistoryUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.ChatHistoryUpdateArgs>
  ): Promise<PrismaChatHistory> {
    return this.prisma.chatHistory.update<T>(args);
  }
  async deleteChatHistory<T extends Prisma.ChatHistoryDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.ChatHistoryDeleteArgs>
  ): Promise<PrismaChatHistory> {
    return this.prisma.chatHistory.delete(args);
  }
}
