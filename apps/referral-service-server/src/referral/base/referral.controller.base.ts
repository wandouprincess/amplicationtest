/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { ReferralService } from "../referral.service";
import { ReferralCreateInput } from "./ReferralCreateInput";
import { Referral } from "./Referral";
import { ReferralFindManyArgs } from "./ReferralFindManyArgs";
import { ReferralWhereUniqueInput } from "./ReferralWhereUniqueInput";
import { ReferralUpdateInput } from "./ReferralUpdateInput";

export class ReferralControllerBase {
  constructor(protected readonly service: ReferralService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Referral })
  async createReferral(
    @common.Body() data: ReferralCreateInput
  ): Promise<Referral> {
    return await this.service.createReferral({
      data: data,
      select: {
        createdAt: true,
        creditEarned: true,
        id: true,
        referralCode: true,
        referralDate: true,
        referredUserId: true,
        updatedAt: true,
        userId: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [Referral] })
  @ApiNestedQuery(ReferralFindManyArgs)
  async referrals(@common.Req() request: Request): Promise<Referral[]> {
    const args = plainToClass(ReferralFindManyArgs, request.query);
    return this.service.referrals({
      ...args,
      select: {
        createdAt: true,
        creditEarned: true,
        id: true,
        referralCode: true,
        referralDate: true,
        referredUserId: true,
        updatedAt: true,
        userId: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Referral })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async referral(
    @common.Param() params: ReferralWhereUniqueInput
  ): Promise<Referral | null> {
    const result = await this.service.referral({
      where: params,
      select: {
        createdAt: true,
        creditEarned: true,
        id: true,
        referralCode: true,
        referralDate: true,
        referredUserId: true,
        updatedAt: true,
        userId: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Referral })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateReferral(
    @common.Param() params: ReferralWhereUniqueInput,
    @common.Body() data: ReferralUpdateInput
  ): Promise<Referral | null> {
    try {
      return await this.service.updateReferral({
        where: params,
        data: data,
        select: {
          createdAt: true,
          creditEarned: true,
          id: true,
          referralCode: true,
          referralDate: true,
          referredUserId: true,
          updatedAt: true,
          userId: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Referral })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteReferral(
    @common.Param() params: ReferralWhereUniqueInput
  ): Promise<Referral | null> {
    try {
      return await this.service.deleteReferral({
        where: params,
        select: {
          createdAt: true,
          creditEarned: true,
          id: true,
          referralCode: true,
          referralDate: true,
          referredUserId: true,
          updatedAt: true,
          userId: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
