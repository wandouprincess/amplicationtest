/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, Referral as PrismaReferral } from "@prisma/client";

export class ReferralServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(args: Omit<Prisma.ReferralCountArgs, "select">): Promise<number> {
    return this.prisma.referral.count(args);
  }

  async referrals<T extends Prisma.ReferralFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.ReferralFindManyArgs>
  ): Promise<PrismaReferral[]> {
    return this.prisma.referral.findMany<Prisma.ReferralFindManyArgs>(args);
  }
  async referral<T extends Prisma.ReferralFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.ReferralFindUniqueArgs>
  ): Promise<PrismaReferral | null> {
    return this.prisma.referral.findUnique(args);
  }
  async createReferral<T extends Prisma.ReferralCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.ReferralCreateArgs>
  ): Promise<PrismaReferral> {
    return this.prisma.referral.create<T>(args);
  }
  async updateReferral<T extends Prisma.ReferralUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.ReferralUpdateArgs>
  ): Promise<PrismaReferral> {
    return this.prisma.referral.update<T>(args);
  }
  async deleteReferral<T extends Prisma.ReferralDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.ReferralDeleteArgs>
  ): Promise<PrismaReferral> {
    return this.prisma.referral.delete(args);
  }
}
